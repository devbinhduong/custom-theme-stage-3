"use strict";
(self["webpackChunkbigcommerce_hera"] = self["webpackChunkbigcommerce_hera"] || []).push([["assets_js_theme_blog_js-node_modules_node-fetch_browser_js"],{

/***/ "./assets/js/theme/blog.js":
/*!*********************************!*\
  !*** ./assets/js/theme/blog.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Blog)
/* harmony export */ });
/* harmony import */ var fancybox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fancybox */ "./node_modules/@fancyapps/ui/src/Fancybox/Fancybox.js");
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./page-manager */ "./assets/js/theme/page-manager.js");
/* harmony import */ var _halothemes_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./halothemes/haloAddOptionForProduct */ "./assets/js/theme/halothemes/haloAddOptionForProduct.js");
/* harmony import */ var _halothemes_haloSidebarToggle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./halothemes/haloSidebarToggle */ "./assets/js/theme/halothemes/haloSidebarToggle.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var Blog = /*#__PURE__*/function (_PageManager) {
  _inheritsLoose(Blog, _PageManager);
  function Blog(context) {
    return _PageManager.call(this, context) || this;
  }
  var _proto = Blog.prototype;
  _proto.onReady = function onReady() {
    (0,_halothemes_haloSidebarToggle__WEBPACK_IMPORTED_MODULE_4__["default"])();
    this.loadOptionForProductCard(this.context);
    /* Animate Scroll*/
    this.animationScroll();
    this.getBlogPostByTag(".blog-tab-content__post--recenzii");
    this.getBlogPostByTag(".blog-tab-content__post--recomandari");
    this.getBlogPostByTag(".blog-tab-content__post--incurajare");
    this.getBlogPostByTag(".blog-tab-content__post--interviuri");
    this.viewMoreBlogCategory();
    this.getTimeBlog();
    this.similarArticle();
  };
  _proto.loadOptionForProductCard = function loadOptionForProductCard(context) {
    if ($('#featured-products .card').length > 0) {
      (0,_halothemes_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_3__["default"])(context, 'featured-products');
    }
  }

  /* Animation Scroll */;
  _proto.animationScroll = function animationScroll() {
    var itemLink = $('.tab-title__link');
    if (!itemLink) return;
    var _loop = function _loop() {
      var item = _step.value;
      var tabTile = item.closest('.tab-title__item');
      item.addEventListener('click', function (e) {
        e.preventDefault();
        /* Active Tab */
        var tabTileActive = document.querySelector('.tab-title__item.active');
        if (tabTileActive) tabTileActive.classList.remove('active');
        tabTile.classList.add('active');
        /* Scroll */
        var itemHref = item.getAttribute('href');
        $('html, body').animate({
          scrollTop: $(itemHref).offset().top - 200
        }, 1000);
      });
    };
    for (var _iterator = _createForOfIteratorHelperLoose(itemLink), _step; !(_step = _iterator()).done;) {
      _loop();
    }
  }

  /* Get Post By Tag Name*/;
  _proto.getBlogPostByTag = function getBlogPostByTag(elementClass) {
    var blogList = document.querySelector(elementClass),
      blogSection = blogList == null ? void 0 : blogList.closest(".blog-tab__content"),
      blogUrl = blogSection == null ? void 0 : blogSection.querySelector(".blog-tab-content__link").getAttribute("href");
    if (!blogList) return;
    fetch(blogUrl).then(function (response) {
      return response.text();
    }).then(function (content) {
      var template = document.createElement('div');
      template.innerHTML = content;
      var newContent = template.querySelector(".blog-catagory-content").innerHTML;
      blogList.innerHTML = newContent;
    })

    /* Show 9 blog post on desktop */.then(function () {
      if (window.innerWidth > 768) {
        var blogPost = blogSection.querySelectorAll(".blog-tab-content__post .blog");
        for (var i = 0; i < blogPost.length; i++) {
          if (i > 8) {
            blogPost[i].remove();
          }
        }
      }
    })

    /* Show 3 blog post on mobile */.then(function () {
      if (window.innerWidth < 768) {
        var blogPost = blogSection.querySelectorAll(".blog-tab-content__post .blog");
        for (var i = 0; i < blogPost.length; i++) {
          if (i > 2) {
            blogPost[i].remove();
          }
        }
      }
    }).then(function () {
      $(elementClass).slick({
        infinite: false,
        slidesToShow: 3,
        slidesToScroll: 3,
        arrows: false,
        draggable: true,
        dots: true,
        /* Responsive */
        responsive: [{
          breakpoint: 900,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2,
            dots: true
          }
        }, {
          breakpoint: 767,
          settings: {
            slidesToShow: 1,
            variableWidth: true,
            dots: true,
            slidesToScroll: 1
          }
        }]
      });
    }).then(function () {
      var dot = blogSection.querySelectorAll(".slick-dots li");
      dot[0].click();
    })

    /* Scroll To Top After Click Above */.then(function () {
      window.scrollTo(0, 0);
    })

    /* Get Reading Time */.then(function () {
      var haloDescription = document.querySelectorAll('.blog-post.halo-description');
      for (var _iterator2 = _createForOfIteratorHelperLoose(haloDescription), _step2; !(_step2 = _iterator2()).done;) {
        var description = _step2.value;
        var descriptionText = description.textContent.trim();
        var extractedText = descriptionText.match(/(\d+\smin\sde\scitit)/i);
        if (extractedText) {
          extractedText = extractedText[0];
          var blogPostBody = description.closest('.blog-post-body');
          var customBlogReading = blogPostBody.querySelector('.custom-blog-reading');
          customBlogReading.textContent = extractedText;
          description.textContent = description.textContent.replace(extractedText, '').trim();
        }
      }
    })

    /* Get Matching Tags for Custom Post Detail Layout */.then(function () {
      var postDetailCustom = document.querySelector(".custom-post-detail-layout");
      if (postDetailCustom) {
        var showMatchingTags = function showMatchingTags() {
          /* Get All Tags of this post */
          var tags = document.querySelectorAll('.custom-post-tags .link');
          tags.forEach(function (tag) {
            /* Get Tag Name */
            var tagName = tag.innerText.trim();

            /* Find Div the samee with tag name */
            var correspondingDiv = document.getElementById('blog-' + tagName.toLowerCase());
            if (correspondingDiv) {
              correspondingDiv.style.display = 'block';
            }
          });
        };
        showMatchingTags();
      }
    })["catch"](function (error) {
      console.error('Error:', error);
    });
  };
  _proto.viewMoreBlogCategory = function viewMoreBlogCategory() {
    var viewMoreButton = document.querySelector(".post-category-viewMore");
    var blogList = document.querySelector(".blog-catagory-content");
    if (!viewMoreButton) return;
    viewMoreButton.addEventListener("click", function (e) {
      e.preventDefault();
      var nextPage = $('.pagination-item--current').next(),
        link = nextPage.find("a").attr("href");
      fetch(link).then(function (response) {
        return response.text();
      }).then(function (content) {
        var template = document.createElement('div');
        template.innerHTML = content;
        var newContent = $(".blog-catagory-content .blog", $(template));
        var newPagination = $(".pagination-list", $(template));
        if (link) {
          $(newContent).appendTo(blogList);
        }
        $('.pagination-list').html(newPagination);
      })

      /* Remove View More Button */.then(function () {
        var nextPagination = document.querySelector(".pagination-item--next");
        if (!nextPagination) {
          viewMoreButton.style.display = "none";
        }
      })["catch"](function (error) {
        console.error('Error:', error);
      });
    });
  };
  _proto.getTimeBlog = function getTimeBlog() {
    var haloDescription = document.querySelectorAll('.blog-post.halo-description');
    var _loop2 = function _loop2() {
        descriptionText = haloDescription[i].innerHTML.trim();
        extractedText = descriptionText.match(/(\d+\smin\sde\scitit)/i);
        if (extractedText) {
          extractedText = extractedText[0];
          blogPostBody = haloDescription[i].closest('.blog');
          customBlogReading = blogPostBody.querySelector('.custom-blog-reading');
          customBlogReading.innerHTML = extractedText;

          /* Reading Time in blog detail page */
          var blogDetail = document.querySelector(".blog-post-detail .post-detail__top");
          if (blogDetail) {
            var convertTextToMinute = function convertTextToMinute(text) {
              var regex = /(\d+)\s*min\s+de\s+citit/;
              var match = text.match(regex);
              if (match && match[1]) {
                var minutes = parseInt(match[1]);
                return minutes + " minute";
              } else {
                return text;
              }
            };
            blogDetailReading = blogDetail.querySelector('.custom-blog-reading');
            var newReadingTime = convertTextToMinute(extractedText);
            if (i == 0) {
              blogDetailReading.innerHTML = convertTextToMinute(extractedText);
            }
          }
          haloDescription[i].innerHTML = haloDescription[i].innerHTML.replace(extractedText, '').trim();
        }
      },
      descriptionText,
      extractedText,
      blogPostBody,
      customBlogReading,
      blogDetailReading;
    for (var i = 0; i < haloDescription.length; i++) {
      _loop2();
    }
  };
  _proto.similarArticle = function similarArticle() {
    var _document$querySelect;
    var similarTagLink = (_document$querySelect = document.querySelector(".blog-post-tags .tags .tag .link")) == null ? void 0 : _document$querySelect.getAttribute("href");
    if (!similarTagLink) return;
    fetch(similarTagLink).then(function (response) {
      return response.text();
    }).then(function (content) {
      var template = document.createElement('div');
      template.innerHTML = content;
      var newContent = template.querySelector("#blog-listing-container .blog-tab__content .blog-catagory-content").innerHTML;
      newContent = newContent.split("<nav")[0];
      document.querySelector(".similar-blog__list").innerHTML = newContent;
    }).then(function () {
      var blogPost = document.querySelectorAll(".similar__wrapper .blog");
      for (var i = 0; i < blogPost.length; i++) {
        if (i > 2) {
          blogPost[i].remove();
        }
      }
    }).then(function () {
      var haloDescription = document.querySelectorAll('.similar__wrapper .blog-post.halo-description');
      for (var _iterator3 = _createForOfIteratorHelperLoose(haloDescription), _step3; !(_step3 = _iterator3()).done;) {
        var description = _step3.value;
        var descriptionText = description.textContent.trim();
        var extractedText = descriptionText.match(/(\d+\smin\sde\scitit)/i);
        if (extractedText) {
          extractedText = extractedText[0];
          var blogPostBody = description.closest('.similar__wrapper .blog-post-body');
          var customBlogReading = blogPostBody.querySelector('.similar__wrapper .custom-blog-reading');
          customBlogReading.textContent = extractedText;
          description.textContent = description.textContent.replace(extractedText, '').trim();
        }
      }
    }).then(function () {
      $(document).ready(function () {
        $('.similar-blog__list').slick({
          infinite: false,
          slidesToShow: 3,
          slidesToScroll: 3,
          arrows: false,
          draggable: true,
          dots: true,
          /* Responsive */
          responsive: [{
            breakpoint: 900,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2,
              dots: true
            }
          }, {
            breakpoint: 767,
            settings: {
              slidesToShow: 1,
              variableWidth: true,
              dots: true,
              slidesToScroll: 1
            }
          }]
        });
      });
    });
  };
  return Blog;
}(_page_manager__WEBPACK_IMPORTED_MODULE_2__["default"]);


/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {



// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof __webpack_require__.g !== 'undefined') { return __webpack_require__.g; }
	throw new Error('unable to locate global object');
}

var globalObject = getGlobal();

module.exports = exports = globalObject.fetch;

// Needed for TypeScript and Webpack.
if (globalObject.fetch) {
	exports["default"] = globalObject.fetch.bind(globalObject);
}

exports.Headers = globalObject.Headers;
exports.Request = globalObject.Request;
exports.Response = globalObject.Response;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,